package com.chatop.backend.service;

import java.util.Optional;

import com.chatop.backend.exceptions.UserNotFoundException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;
import com.chatop.backend.model.DAOUser;
import com.chatop.backend.repository.UserRepository;

import lombok.Data;

@Data
@Service
public class UserService {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;


    public Iterable<DAOUser> getUsers() {
        return userRepository.findAll();
    }

    public void deleteUser(final Integer id) {
        userRepository.deleteById(id);
    }

    public DAOUser saveUser(DAOUser user) {
        DAOUser savedUser = userRepository.save(user);
        return savedUser;
    }

    public DAOUser getUserById(final Integer id) {
        Optional<DAOUser> user = userRepository.findById(id);
        return user.orElse(null);
    }


    public DAOUser getCurrentUser() {
        Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();

        if (principal instanceof UserDetails) {
            String username = ((UserDetails)principal).getUsername();
            DAOUser user = userRepository.findByName(username);

            if(user == null){
                throw new UserNotFoundException("There is no user currently authenticated");
            }

            return user;
        }

        throw new UserNotFoundException("There is no user currently authenticated");
    }


    public Optional<DAOUser> findById(Integer id) {
        return  userRepository.findById(id);
    }
}